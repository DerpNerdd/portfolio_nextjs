Working on this project was a truly enlightening experience. Porting an existing static website to Next.js was both challenging and rewarding. Originally, the website was built using plain HTML, CSS, and JavaScript, which meant that every aspect—from structure to styling—was tightly coupled. Transitioning this project into Next.js required me to deconstruct the static site into reusable React components, establish a clear file structure, and harness Next.js features such as the public folder for static assets and the Head component for managing meta tags. This modular approach not only improved code maintainability but also made the site more scalable.

One of the most significant hurdles was ensuring media responsiveness. The original design relied heavily on fixed positioning and absolute measurements to achieve its aesthetic on desktop screens. However, these techniques did not translate well to mobile devices, where screen sizes vary dramatically. I had to rethink the layout entirely for smaller devices by implementing custom media queries. This involved increasing the size of buttons and text for touch interactions, repositioning images, and sometimes even hiding certain decorative elements that cluttered the view on mobile. The process forced me to adopt a mobile-first mindset, designing interfaces that were both visually appealing and functionally sound across various devices.

Integrating third-party libraries like GSAP and jQuery in a Next.js environment added another layer of complexity. Next.js, by default, supports server-side rendering, which means that any client-specific library must be carefully handled. I had to ensure that libraries like GSAP, used for animations (including the foam animation and other interactive elements), only ran on the client side. This was achieved using the "use client" directive and Next.js’s Script component with proper loading strategies. The experience taught me how to navigate the nuances of client-side versus server-side code and how to dynamically load external scripts without compromising performance or functionality.

Overall, this project was an intensive learning experience. I honed my skills in modern React-based frameworks, improved my understanding of responsive design principles, and discovered practical ways to integrate dynamic libraries into a server-rendered application. The challenges of porting to Next.js and making the media responsive pushed me to explore new techniques and best practices in web development. The end result is a more robust, scalable, and responsive portfolio that not only looks great across devices but also leverages the power of Next.js for improved performance and maintainability.
